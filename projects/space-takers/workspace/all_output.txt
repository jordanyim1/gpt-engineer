To make the player only shoot 1 bullet when they press space bar, we can modify the `Player` class to only spawn a bullet if there are no bullets currently on the screen.

player.py
```python
import pygame
from bullet import Bullet

class Player(pygame.sprite.Sprite):
    def __init__(self, game):
        super().__init__()
        self.game = game
        self.image = pygame.Surface((50, 50))
        self.image.fill((0, 255, 0))
        self.rect = self.image.get_rect(center=(400, 300))
        self.bullets = pygame.sprite.Group()

    def update(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            self.rect.x -= 2
        if keys[pygame.K_RIGHT]:
            self.rect.x += 2
        if keys[pygame.K_UP]:
            self.rect.y -= 2
        if keys[pygame.K_DOWN]:
            self.rect.y += 2
        if keys[pygame.K_SPACE] and not self.bullets:  # Only spawn a bullet if there are no bullets on the screen
            bullet = Bullet(self)
            self.bullets.add(bullet)

    def draw(self, screen):
        screen.blit(self.image, self.rect)
        self.bullets.draw(screen)
```

To display the score in the top right, we can add a `score` attribute to the `Game` class and increment it whenever an enemy is killed. We can then draw the score on the screen in the `run` method.

game.py
```python
import pygame
from player import Player
from enemy import Enemy

class Game:
    def __init__(self):
        pygame.init()
        self.screen = pygame.display.set_mode((800, 600))
        self.clock = pygame.time.Clock()
        self.player = Player(self)
        self.enemies = pygame.sprite.Group()
        self.score = 0  # Add score attribute
        self.font = pygame.font.Font(None, 36)  # Font to display the score

    def run(self):
        running = True
        while running:
            self.clock.tick(60)
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False

            self.player.update()
            self.player.bullets.update()
            self.enemies.update()

            # Collision detection
            for bullet in pygame.sprite.groupcollide(self.player.bullets, self.enemies, True, True):
                self.score += 1  # Increment score when an enemy is killed

            if pygame.sprite.spritecollideany(self.player, self.enemies):
                running = False  # End the game if the player collides with an enemy

            self.screen.fill((0, 0, 0))
            self.player.draw(self.screen)
            self.enemies.draw(self.screen)

            # Draw score
            score_text = self.font.render(f'Score: {self.score}', True, (255, 255, 255))
            self.screen.blit(score_text, (650, 10))

            pygame.display.flip()

        pygame.quit()

    def spawn_enemy(self):
        enemy = Enemy(self)
        self.enemies.add(enemy)
```

In the `Player` class, we're checking if `self.bullets` is empty before spawning a bullet. In the `Game` class, we're incrementing `self.score` whenever an enemy is killed and drawing the score on the screen using `pygame.font.Font.render` and `pygame.Surface.blit`.