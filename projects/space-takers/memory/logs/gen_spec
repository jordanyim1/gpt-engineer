[{"role": "system", "content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nYou will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.\n\nThen you will output the content of each file including ALL code.\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\nFILENAME is the lowercase file name including the file extension,\nLANG is the markup code block language for the code's language, and CODE is the code:\n\nFILENAME\n```LANG\nCODE\n```\n\nDo not comment on what every file does\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nUseful to know:\nYou almost always put different classes in different files.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nYou always add a comment briefly describing the purpose of the function definition.\nYou try to add comments explaining very complex bits of logic.\nYou always follow the best practices for the requested languages in terms of describing the code written as a defined\npackage/project.\n\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n"}, {"role": "system", "content": "Instructions: create a side scrolling shooter game.  The player should be able to move with the arrow keys and shoot with space bar.  Enemies should appear from the right of the screen and move towards the left.\nThe player should be able to shoot the enemies to get the highest score."}, {"role": "user", "content": "You are a super smart developer. You have been asked to make a specification for a program.\n\nThink step by step to make sure we get a high quality specification and we don't miss anything.\nFirst, be super explicit about what the program should do, which features it should have\nand give details about anything that might be unclear. **Don't leave anything unclear or undefined.**\n\nSecond, lay out the names of the core classes, functions, methods that will be necessary,\nas well as a quick comment on their purpose.\n\nThis specification will be used later as the basis for the implementation.\n"}, {"role": "assistant", "content": "Program Specification:\n\nThe program is a side-scrolling shooter game. The player controls a character that can move up and down on the left side of the screen, and can shoot projectiles towards the right side of the screen. Enemies appear from the right side of the screen and move towards the left. The player's goal is to shoot the enemies before they reach the left side of the screen. The player's score increases for each enemy they shoot.\n\nFeatures:\n\n1. Player Movement: The player can move up and down using the arrow keys. The player's character cannot move off the screen.\n\n2. Shooting: The player can shoot projectiles by pressing the space bar. The projectiles move from the left side of the screen to the right.\n\n3. Enemies: Enemies appear from the right side of the screen and move towards the left. The frequency and speed of the enemies increase as the player's score increases.\n\n4. Scoring: The player's score increases for each enemy they shoot. The score does not decrease if an enemy reaches the left side of the screen, but the game ends.\n\n5. Game Over: The game ends if an enemy reaches the left side of the screen. The player's final score is displayed.\n\nCore Classes, Functions, and Methods:\n\n1. Player Class: Represents the player's character. Has methods for moving up and down, and for shooting projectiles.\n\n2. Projectile Class: Represents the projectiles shot by the player. Has a method for moving towards the right side of the screen.\n\n3. Enemy Class: Represents the enemies. Has a method for moving towards the left side of the screen.\n\n4. Game Class: Controls the game logic. Has methods for creating enemies, checking for collisions between projectiles and enemies, updating the score, and ending the game.\n\n5. Main Function: The entry point of the program. Creates an instance of the Game class and starts the game loop.\n\n6. Handle Input Function: Checks for user input and calls the appropriate methods of the Player class.\n\n7. Update Function: Called each frame of the game loop. Calls the update methods of the Player, Projectile, and Enemy classes, and checks for game over conditions.\n\n8. Render Function: Called each frame of the game loop. Draws the current state of the game to the screen.\n\n9. Collision Detection Function: Checks for collisions between projectiles and enemies. If a collision is detected, the enemy and the projectile are removed from the game and the score is updated.\n\n10. Score Class: Keeps track of the player's score. Has methods for increasing the score and displaying the final score when the game ends."}]